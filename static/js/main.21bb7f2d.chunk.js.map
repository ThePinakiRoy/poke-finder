{"version":3,"sources":["components/card-list/CardList.jsx","components/search/Search.jsx","components/Pagination.jsx","App.js","serviceWorker.js","index.js"],"names":["CardList","props","Grid","Row","columns","pokemon","map","poke","id","url","substr","length","Column","key","name","className","mobile","tablet","computer","Card","Image","src","wrapped","ui","Content","Header","as","toUpperCase","extra","Icon","Search","placeholder","handleChange","Input","icon","inverted","circular","link","fluid","onChange","Pagination","state","pager","this","items","setPage","initialPage","prevProps","prevState","page","pageSize","totalPages","getPager","pageOfItems","slice","startIndex","endIndex","setState","onChangePage","totalItems","currentPage","startPage","endPage","Math","ceil","min","pages","Array","keys","i","onClick","index","React","Component","defaultProps","App","e","searchField","target","value","pokemons","fetch","then","response","json","data","console","log","results","catch","error","filtered","filter","toLowerCase","includes","Container","text","Segment","stacked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.21bb7f2d.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    Grid,\r\n    Card,\r\n    Icon,\r\n    Image ,Header  \r\n    \r\n} from 'semantic-ui-react'\r\nexport const CardList = (props) => {\r\n    return (\r\n        <Grid>\r\n            <Grid.Row columns={3} >\r\n                {\r\n                    props\r\n                    .pokemon\r\n                    .map(poke => {\r\n\r\n                        const id = poke\r\n                            .url\r\n                            .substr(34, poke.url.length - 34);\r\n                        return (\r\n                            <Grid.Column key={poke.name} className=\"my-column\" mobile={8} tablet={8} computer={4}>\r\n                                <Card className=\"my-card\">\r\n                                    <Image\r\n                                        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\r\n                                        wrapped\r\n                                        ui={false}/>\r\n                                    <Card.Content>\r\n                                        \r\n                                        <Header as='h6' className=\"text-center\">{poke.name.toUpperCase()}</Header>   \r\n                                    </Card.Content>\r\n                                    <Card.Content extra>\r\n                                        <a>\r\n                                            <Icon name='user'/>\r\n                                            Poke Id {id}\r\n                                        </a>\r\n                                    </Card.Content>\r\n                                </Card>\r\n\r\n                            </Grid.Column>\r\n                        )\r\n                    })\r\n}\r\n            </Grid.Row>\r\n            <br/>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Icon, Input} from 'semantic-ui-react'\r\nexport const Search = ({placeholder,handleChange}) => {\r\n    return (\r\n        <Input\r\n            icon={< Icon name = 'search' inverted circular link />}\r\n            placeholder={placeholder}\r\n            fluid\r\n            onChange={handleChange}/>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    onChangePage: PropTypes.func.isRequired,\r\n    initialPage: PropTypes.number,\r\n    pageSize: PropTypes.number\r\n}\r\n\r\nconst defaultProps = {\r\n    initialPage: 1,\r\n    pageSize: 24\r\n}\r\n\r\nclass Pagination extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { pager: {} };\r\n    }\r\n\r\n    componentWillMount() {\r\n        // set page if items array isn't empty\r\n        if (this.props.items && this.props.items.length) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // reset page if items array has changed\r\n        if (this.props.items !== prevProps.items) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n    setPage(page) {\r\n        var { items, pageSize } = this.props;\r\n        var pager = this.state.pager;\r\n\r\n        if (page < 1 || page > pager.totalPages) {\r\n            return;\r\n        }\r\n\r\n        // get new pager object for specified page\r\n        pager = this.getPager(items.length, page, pageSize);\r\n\r\n        // get new page of items from items array\r\n        var pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\r\n\r\n        // update state\r\n        this.setState({ pager: pager });\r\n\r\n        // call change page function in parent component\r\n        this.props.onChangePage(pageOfItems);\r\n    }\r\n\r\n    getPager(totalItems, currentPage, pageSize) {\r\n        // default to first page\r\n        currentPage = currentPage || 1;\r\n\r\n        // default page size is 10\r\n        pageSize = pageSize || 12;\r\n\r\n        // calculate total pages\r\n        var totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n        var startPage, endPage;\r\n        if (totalPages <= 10) {\r\n            // less than 10 total pages so show all\r\n            startPage = 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // more than 10 total pages so calculate start and end pages\r\n            if (currentPage <= 6) {\r\n                startPage = 1;\r\n                endPage = 10;\r\n            } else if (currentPage + 4 >= totalPages) {\r\n                startPage = totalPages - 9;\r\n                endPage = totalPages;\r\n            } else {\r\n                startPage = currentPage - 5;\r\n                endPage = currentPage + 4;\r\n            }\r\n        }\r\n\r\n        // calculate start and end item indexes\r\n        var startIndex = (currentPage - 1) * pageSize;\r\n        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n        // create an array of pages to ng-repeat in the pager control\r\n        var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\r\n\r\n        // return object with all pager properties required by the view\r\n        return {\r\n            totalItems: totalItems,\r\n            currentPage: currentPage,\r\n            pageSize: pageSize,\r\n            totalPages: totalPages,\r\n            startPage: startPage,\r\n            endPage: endPage,\r\n            startIndex: startIndex,\r\n            endIndex: endIndex,\r\n            pages: pages\r\n        };\r\n    }\r\n\r\n    render() {\r\n        var pager = this.state.pager;\r\n\r\n        if (!pager.pages || pager.pages.length <= 1) {\r\n            // don't display pager if there is only 1 page\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <ul className=\"pagination\">\r\n                \r\n                <li className={pager.currentPage === 1 ? 'disabled' : ''}>\r\n                    <a onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\r\n                </li>\r\n                {pager.pages.map((page, index) =>\r\n                    <li key={index} className={pager.currentPage === page ? 'active' : ''}>\r\n                        <a onClick={() => this.setPage(page)}>{page}</a>\r\n                    </li>\r\n                )}\r\n                <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\r\n                    <a onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\r\n                </li>\r\n                \r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nPagination.propTypes = propTypes;\r\nPagination.defaultProps = defaultProps;\r\nexport default Pagination;","import React, {Component} from 'react'\nimport {Container, Header, Segment} from 'semantic-ui-react'\nimport {CardList} from './components/card-list/CardList'\nimport {Search} from './components/search/Search'\nimport Pagination from './components/Pagination'\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pokemons: [],\n            searchField: '',\n            pageOfItems: []\n        }\n    }\n    componentDidMount() {\n        fetch('./model/pokemondata.json').then((response) => {\n            return response.json();\n        }).then((data) => {\n            console.log(data.results);\n            this.setState({pokemons: data.results})\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    handleChange = e =>{\n        this.setState({searchField: e.target.value})\n    }\n    onChangePage = (pageOfItems) => {\n        // update state with new page of items\n        this.setState({ pageOfItems: pageOfItems });\n    }\n    render() {\n        const {pokemons, searchField , pageOfItems} = this.state;\n        let filtered = pageOfItems.filter(pokemon => pokemon.name.toLowerCase().includes(searchField.toLowerCase()));\n        \n        return (\n            <Container text className=\"text-center\">\n                <Segment stacked>\n                    <Header as='h1' className=\"text-center fnt poke-text\">Pokémon</Header>\n                    <Search\n                        placeholder={'Search Pokémon...'}\n                        handleChange={this.handleChange} />\n                </Segment>\n                <CardList pokemon={filtered}/>\n                <Pagination items={pokemons} onChangePage={this.onChangePage} />\n            </Container>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}