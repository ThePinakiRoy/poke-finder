{"version":3,"sources":["components/card-list/CardList.jsx","components/search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["CardList","props","Grid","Row","columns","pokemon","map","poke","id","url","substr","length","Column","key","name","className","mobile","tablet","computer","Card","Image","src","wrapped","ui","Content","Header","as","toUpperCase","extra","Icon","Search","placeholder","handleChange","Input","icon","inverted","circular","link","fluid","onChange","App","e","setState","searchField","target","value","state","pokemons","fetch","then","response","json","data","console","log","results","catch","error","this","filtered","filter","toLowerCase","includes","Container","text","Segment","stacked","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yTAQaA,EAAW,SAACC,GACrB,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAS,GAEXH,EACCI,QACAC,KAAI,SAAAC,GAED,IAAMC,EAAKD,EACNE,IACAC,OAAO,GAAIH,EAAKE,IAAIE,OAAS,IAClC,OACI,kBAACT,EAAA,EAAKU,OAAN,CAAaC,IAAKN,EAAKO,KAAMC,UAAU,YAAYC,OAAQ,EAAGC,OAAQ,EAAGC,SAAU,GAC/E,kBAACC,EAAA,EAAD,CAAMJ,UAAU,WACZ,kBAACK,EAAA,EAAD,CACIC,IAAG,mFAA8Eb,EAA9E,QACHc,SAAO,EACPC,IAAI,IACR,kBAACJ,EAAA,EAAKK,QAAN,KAEI,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKX,UAAU,eAAeR,EAAKO,KAAKa,gBAEvD,kBAACR,EAAA,EAAKK,QAAN,CAAcI,OAAK,GACf,2BACI,kBAACC,EAAA,EAAD,CAAMf,KAAK,SADf,WAEaN,UAUzC,+B,SC1CCsB,EAAS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAChC,OACI,kBAACC,EAAA,EAAD,CACIC,KAAM,kBAAEL,EAAA,EAAF,CAAOf,KAAO,SAASqB,UAAQ,EAACC,UAAQ,EAACC,MAAI,IACnDN,YAAaA,EACbO,OAAK,EACLC,SAAUP,KCJDQ,E,YACjB,aAAe,IAAD,8BACV,+CAiBJR,aAAe,SAAAS,GACX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBrC,EAAKC,MAAQ,CACTC,SAAU,GACVJ,YAAa,IAJP,E,iFAOO,IAAD,OAChBK,MAAM,4BAA4BC,MAAK,SAACC,GACpC,OAAOA,EAASC,UACjBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,EAAKG,SACjB,EAAKb,SAAS,CAACK,SAAUK,EAAKG,aAE7BC,OAAM,SAAUC,GACbJ,QAAQC,IAAIG,Q,+BAMd,IAAD,EAC2BC,KAAKZ,MAA9BC,EADF,EACEA,SAAUJ,EADZ,EACYA,YACXgB,EAAWZ,EAASa,QAAO,SAAAvD,GAAO,OAAIA,EAAQS,KAAK+C,cAAcC,SAASnB,EAAYkB,kBAC5F,OACI,kBAACE,EAAA,EAAD,CAAWC,MAAI,GACX,kBAACC,EAAA,EAAD,CAASC,SAAO,GACZ,kBAACzC,EAAA,EAAD,CAAQC,GAAG,KAAKX,UAAU,6BAA1B,cACA,kBAAC,EAAD,CACIgB,YAAa,uBACbC,aAAc0B,KAAK1B,gBAE3B,kBAAC,EAAD,CAAU3B,QAASsD,S,GAjCFQ,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMyB,c","file":"static/js/main.a7f8a32e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {\r\n    Grid,\r\n    Card,\r\n    Icon,\r\n    Image ,Header  \r\n    \r\n} from 'semantic-ui-react'\r\nexport const CardList = (props) => {\r\n    return (\r\n        <Grid>\r\n            <Grid.Row columns={3} >\r\n                {\r\n                    props\r\n                    .pokemon\r\n                    .map(poke => {\r\n\r\n                        const id = poke\r\n                            .url\r\n                            .substr(34, poke.url.length - 34);\r\n                        return (\r\n                            <Grid.Column key={poke.name} className=\"my-column\" mobile={8} tablet={8} computer={4}>\r\n                                <Card className=\"my-card\">\r\n                                    <Image\r\n                                        src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`}\r\n                                        wrapped\r\n                                        ui={false}/>\r\n                                    <Card.Content>\r\n                                        \r\n                                        <Header as='h6' className=\"text-center\">{poke.name.toUpperCase()}</Header>   \r\n                                    </Card.Content>\r\n                                    <Card.Content extra>\r\n                                        <a>\r\n                                            <Icon name='user'/>\r\n                                            Poke Id {id}\r\n                                        </a>\r\n                                    </Card.Content>\r\n                                </Card>\r\n\r\n                            </Grid.Column>\r\n                        )\r\n                    })\r\n}\r\n            </Grid.Row>\r\n            <br/>\r\n        </Grid>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Icon, Input} from 'semantic-ui-react'\r\nexport const Search = ({placeholder,handleChange}) => {\r\n    return (\r\n        <Input\r\n            icon={< Icon name = 'search' inverted circular link />}\r\n            placeholder={placeholder}\r\n            fluid\r\n            onChange={handleChange}/>\r\n    )\r\n}\r\n","import React, {Component} from 'react'\nimport {Container, Header, Segment} from 'semantic-ui-react'\nimport {CardList} from './components/card-list/CardList'\nimport {Search} from './components/search/Search'\nexport default class App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pokemons: [],\n            searchField: ''\n        }\n    }\n    componentDidMount() {\n        fetch('./model/pokemondata.json').then((response) => {\n            return response.json();\n        }).then((data) => {\n            console.log(data.results);\n            this.setState({pokemons: data.results})\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    handleChange = e =>{\n        this.setState({searchField: e.target.value})\n    }\n    render() {\n        const {pokemons, searchField} = this.state;\n        const filtered = pokemons.filter(pokemon => pokemon.name.toLowerCase().includes(searchField.toLowerCase()))\n        return (\n            <Container text>\n                <Segment stacked>\n                    <Header as='h1' className=\"text-center fnt poke-text\">Pokémon</Header>\n                    <Search\n                        placeholder={'Search Pokémon...'}\n                        handleChange={this.handleChange} />\n                </Segment>\n                <CardList pokemon={filtered}/>\n            </Container>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}